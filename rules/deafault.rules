import org.openhab.model.script.actions.*
import org.openhab.core.library.types.*
import java.util.*
import org.openhab.model.script.actions.Timer
import org.eclipse.smarthome.core.items
import org.eclipse.smarthome.core.persistence
import org.eclipse.smarthome.core.library.items
import org.eclipse.smarthome.model.script.actions
import org.eclipse.smarthome.core.library.types
import java.net.URI
import org.joda.time.*
import org.openhab.model.script.actions.Timer

var Number electricUsed
var Number electricUsed1
var Number usedYesterday
var Number usedYesterday1
//var yearCurr = now.getYear
//var monthCurr = now.getMonthOfYear
//var dayCurr = now.getDayOfMonth
//var hourCurr = now.getHourOfDay
//var minuteCurr = now.getMinuteOfHour

rule "Reset parameter"
when
    Time cron "0 * * * * ?"
then
    var yearCurr0 = now.getYear
    var monthCurr0 = now.getMonthOfYear
    var dayCurr0 = now.getDayOfMonth 
    //var dayCurr00 = now.getDayOfWeek
    var hourCurr0 = now.getHourOfDay
    var minuteCurr0 = now.getMinuteOfHour
    if (usedYesterday == null) {
        usedYesterday = 0
        postUpdate(Used_Yesterday, usedYesterday)
    }
    if (usedYesterday1 == null){
        usedYesterday1 = 0
        postUpdate(Used_Yesterday2, usedYesterday1)
    }
    if (hourCurr0 == 00 && minuteCurr0 == 00){
        usedYesterday = electricUsed
        electricUsed = 0
        postUpdate(Used_Yesterday, usedYesterday)
        usedYesterday1 = electricUsed1
        electricUsed1 = 0
        postUpdate(Used_Yesterday2, usedYesterday1)
    }
    postUpdate(Time_now, hourCurr0 + ":" + minuteCurr0)
    postUpdate(Date_now, dayCurr0 + "/" + monthCurr0 + "/" + yearCurr0)
end

rule "Electric Used"
when
    Time cron "0 * * * * ?"
then
    var hourCurr = now.getHourOfDay
    var minuteCurr = now.getMinuteOfHour
    var Number powerCurr = PowerTotal.state as DecimalType
    var Number powerCurr1 = PowerTotal2.state as DecimalType
    electricUsed = electricUsed + powerCurr / 60000
    electricUsed1 = electricUsed1 + powerCurr1 / 60000
    postUpdate(Electric_Used, electricUsed)
    postUpdate(Electric_Used2, electricUsed1)    
end

/*rule "Timer"
when
    System started 
then
    postUpdate(Time_now, minuteCurr)
end

rule "Electric_used"
when
    System started
then
    var Number electricUsed = PowerTotal.state as DecimalType
    postUpdate(Electric_Used, electricUsed)
end */